name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/master
  STAGING_BRANCH: refs/heads/staging
  DEV_BRANCH: refs/heads/staging-dev
  EB_APP: isomer-cms
  EB_ENV_PRODUCTION: isomercms-backend-prod
  EB_ENV_STAGING: isomercms-backend-staging
  EB_ENV_DEV: isomercms-backend-staging-dev
  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
jobs:
  gatekeep:
    name: Determine if Build & Deploy is needed
    outputs:
      proceed: ${{ steps.determine_proceed.outputs.proceed }}
    runs-on: ubuntu-18.04
    if: github.event_name == 'push'
    steps:
      - shell: python
        id: determine_proceed
        run: |
          import os
          ref = os.environ['GITHUB_REF']
          prod = os.environ['PRODUCTION_BRANCH']
          staging = os.environ['STAGING_BRANCH']
          dev = os.environ['DEV_BRANCH']
          if ref == prod:
            print('::set-output name=proceed::true')
          else:
            print('::set-output name=proceed::false')
  deploy:
    name: Build and deploy to EB
    runs-on: ubuntu-18.04
    needs: [gatekeep]
    if: needs.gatekeep.outputs.proceed == 'true'
    steps:
        - uses: actions/checkout@v2
        - name: Use Node.js
          uses: actions/setup-node@v1
          with:
            node-version: '12.x'
        - name: Cache Node.js modules
          uses: actions/cache@v2
          with:
            # npm cache files are stored in `~/.npm` on Linux/macOS
            path: ~/.npm
            key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.OS }}-node-
              ${{ runner.OS }}-
        - name: Install NPM
          run: npm ci
        - name: Zip application
          run: zip -r "deploy.zip" * .ebextensions -x .env-example .gitignore package-lock.json
        - name: Get timestamp
          shell: bash
          run: echo "##[set-output name=timestamp;]$(env TZ=Asia/Singapore date '+%Y%m%d%H%M%S')"
          id: get_timestamp
        - name: Get Elastic Beanstalk label
          shell: bash
          run: echo "##[set-output name=label;]$(echo github-${GITHUB_SHA}-${TIMESTAMP})"
          id: get_label
          env:
            TIMESTAMP: ${{ steps.get_timestamp.outputs.timestamp }}
        - name: Get truncated version_description
          id: get_desc
          shell: python
          run: |
            import os
            commit_message = os.environ['COMMIT_MESSAGE']
            description = commit_message[0:100].replace('(', '').replace(')', '').replace('\'', '')
            print('::set-output name=desc::' + description)
        - name: Select Elastic Beanstalk variables
          shell: python
          run: |
            import os
            branch = os.environ['GITHUB_REF']
            production = os.environ['PRODUCTION_BRANCH']
            staging = os.environ['STAGING_BRANCH']
            dev = os.environ['DEV_BRANCH']
            eb_app = os.environ['EB_APP']
            eb_env_production = os.environ['EB_ENV_PRODUCTION']
            eb_env_staging = os.environ['EB_ENV_STAGING']
            eb_env_dev = os.environ['EB_ENV_DEV']
            if branch == production:
              print('::set-output name=eb_app::' + eb_app)
              print('::set-output name=eb_env::' + eb_env_production)
            elif branch == staging:
              print('::set-output name=eb_app::' + eb_app)
              print('::set-output name=eb_env::' + eb_env_staging)
            elif branch == dev:
              print('::set-output name=eb_app::' + eb_app)
              print('::set-output name=eb_env::' + eb_env_dev)
          id: select_eb_vars
        - name: Deploy to EB
          uses: opengovsg/beanstalk-deploy@v11
          with:
            aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_DEPLOYMENT }}
            aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_DEPLOYMENT }}
            application_name: ${{ steps.select_eb_vars.outputs.eb_app }}
            environment_name: ${{ steps.select_eb_vars.outputs.eb_env }}
            version_description: ${{ steps.get_desc.output.desc }}
            version_label: ${{ steps.get_label.outputs.label }}
            region: ap-southeast-1
            deployment_package: deploy.zip
            wait_for_deployment: true
            wait_for_environment_recovery: true